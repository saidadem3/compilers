#----------------------------------------------------------------------
Programming Assignment 03

#----------------------------------------------------------------------
Purpose:

  * Demonstrate still better understanding of lexical and
    syntactic analysis fundamentals by adding some more statements
    and operators to the on-going ASL mini front end.

  * Demonstrate even more Python and Ply programming skills.

#----------------------------------------------------------------------
Background:

  * The new form of our simple language is given in the
    ASL-version-1.txt file.

  * The template included with this assignment shows the essential
    structure for lexical and syntactic analysis stages of a
    Ply-based scanning and parsing tool.  This is effectively the
    reference solution for Homework 02.

    It is absolutely in your best interest to start from this
    template rather than using your own solution to HMWK 02, no
    matter how good you think it was. :)

  * You need to add the Read and Write statements as well as the
    relational, logical, and factorial operators.  In addition, we
    now also have 'real' as a declarable type and real literals.

    Take a look at ASL-version-1.txt for more background
    information on the new items.

  * This new work will require the definition of some reserved
    words, new operators, a new token category (REAL_LITERAL) and
    format, new precedence / associativity rules, parse routines,
    and parse tree node class definitions.

#----------------------------------------------------------------------
Tasks:

  1. Download HMWK_03_dalioba.zip from Canvas.

  2. Unzip the file somewhere convenient.

  3. Change 'dalioba' in the name of the directory to your NetID.
     (Your NetID is three letters followed by four or five digits.
      The directory name will now be something like
      'hmwk_03_abc1234'.)

  4. Look in that directory.

  5. Change the header lines in the provided Python files so that
     they match your information as follows:

      -- Line 1:  Family name first, then a comma, then
                  personal name.

      -- Line 2:  Your NetID.

      -- Line 3:  The date you edited the file in the format
                  YYYY-MM-DD.

  --- IMPORTANT --- IMPORTANT --- IMPORTANT --- IMPORTANT ---
  --- Do steps 6, 7, 8, and 9 for each new item.  DO NOT try to
  --- add all of the new items at once.  Add the items one at a
  --- time and ensure that each is working perfectly before going
  --- on to the next one.

  --- I added the items in the order 'real' type, REAL_LITERAL,
  --- logical operators, relational operators, factorial operator,
  --- read statement, write statement.
  --- IMPORTANT --- IMPORTANT --- IMPORTANT --- IMPORTANT ---

  6. Add the reserved word(s), token category, token format, etc.
     required for the next new item.

  7. Add parse routine(s) for the next new item (if any).

  8. Add the parse tree node class definition for the next new
     item (if any).  (Don't forget to update ParseTree/__init__.py!)

  9. Test the new item you just added by trying it out on the
     corresponding test in Tests/.

     DO NOT try to add the next new item until the one you have
     just added is working perfectly.

  --- IMPORTANT --- IMPORTANT --- IMPORTANT --- IMPORTANT ---
  --- Test each added item using the corresponding .asl file in
  --- Tests/ before going on to the next item.
  --- IMPORTANT --- IMPORTANT --- IMPORTANT --- IMPORTANT ---

 10. Test your work by running it against all the fabulous and
     free tests that have been provided for you in the Tests/
     subdirectory.  You should get output IDENTICAL to that given
     in the corresponding parse files.

     Be careful to save a copy of those .parse files because when
     you run the mini Front End, it will overwrite whatever files
     were there before.

     If your output is the same but has different indention (the
     number of spaces at the front of the line), this means that
     you have screwed up the precedence/associativity and/or the
     production rules in the parse routines.

 11. Before uncorking the champagne and celebrating, write some
     tests of your own and examine how your mini Front End parses
     them.  The most common error here is to screw up the
     precedence/associativity specifications and/or the production
     rules in the parse routines.

     The tests in Tests are useful to get you started, but they
     should not be considered complete.  Write some tests of your
     own and examine the .parse output to see if it's correct.

#----------------------------------------------------------------------
Submission:

Make a zipfile of your 'hmwk_03_abc1234' directory (where
'abc1234' is replaced with YOUR NetID) and submit it on
Canvas as your results for this assignment.

Your submission should be a zipfile that has exactly one item in
it, a directory named 'hmwk_03_abc1234' (where 'abc1234' is YOUR
NetID).  Inside that directory should be the source files for
your solution.

#----------------------------------------------------------------------
Hints:
  1. Ensure your programs compile and run correctly.  Not
     compiling or not generating the correct output will cost you
     points.

     Ensure your output messages match the format shown in the
     sample .parse files in Tests/.  Your output is going to be
     checked by a program, so it has to match EXACTLY.

     After you write your programs, use diff to compare your
     output to the supplied .parse files.  It must match EXACTLY
     or you will be penalized points.

     ('EXACTLY' means character-by-character the same.  No, e.g.,
      differences in spacing, no changes in wording, no changes
      in punctuation, and so forth.  Check your output against
      the supplied .parse files!)

  2. Ensure that you update the three header lines in each of the
     source files with YOUR name (family name first, then a comma,
     then your personal name), YOUR NetID, and the date you edit
     the file (in the format YYYY-MM-DD).

     Not updating the header lines properly will cost you points.

  3. ASL has changed somewhat between HMWK 02 and HMWK 03.  Slight
     tweaks have been made.  Start from the template provided when
     completing this assignment.  (It really is in your best
     interest to do this.)

  4. This is not a lot of work.  In the miniFrontEnd.py template,
     you have to 
     
      * add some reserved words

      * some new token kinds

      * formats for the new token kinds

      * a t_ routine for REAL_LITERAL

      * precedence / associativity rules for the new operators

      * a generalization of p_statement_decl to allow both int and
        real declarations

      * p_ routines for the new read and write statements

      * enhancement of p_expression_binop

      * enhancement of p_expression_unop

     All together, miniFrontEnd.py grew by about 80 lines, which
     includes blank lines and comments. 
     
  5. This time around, there are only two new ParseTree/ classes,
     Statement_Read.py and Statement_Write.py, each about 28 lines
     total.

     Remember that there's about 10 lines of boilerplate in each
     of these files (header comments, blank and divider lines,
     imports, etc.), so the total amount of code in the __init__()
     and dump() routines themselves is not all that large.

     *>*>*> By the way, it's OK if you use a different number of
     lines of code in each of these cases, but if you find
     yourself writing LOTS more code than this, you are probably
     going down the wrong path and need to rethink how you're
     doing this assignment.

  6. Here are the signatures for the classes that you have to
     create for this assignment:

      Statement_Read( lineNum, idList )
      Statement_Write( lineNum, exprList )

  7. After you complete your work, make up some test cases of your
     own to ensure that your scanning and parsing really matches
     what's shown in ASL-version-1.txt.  The test cases in
     Tests are useful, but they are NOT comprehensive.  Make up
     some more of your own.

     It's OK to share test cases and expected .parse files with
     other students, but do NOT violate the Honor Code as regards
     your programming work.  Do NOT share details of your
     programming, review other students' work, etc.

  8. Ensure your submission to Canvas is packaged EXACTLY as
     described above.

      -- Your submission should be a ZIP FILE (not a tar, rar, gz,
         or any other kind of compressed file).

      -- The zip file should be named 'hmwk_03_abc1234.zip' (with
         'abc1234' replaced with YOUR NetID).

      -- This zip file should have ONE item in it, a directory
         named 'hmwk_03_abc1234'  (with 'abc1234' replaced with
         YOUR NetID).

      -- Your source files should be in that directory, the
         miniFrontEnd.py and Exceptions.py files and the
         ParseTree/ subdirectory.

     Submissions in the wrong format score ZERO points.

  9. After you submit your zip file on Canvas, download it from
     Canvas and check that your submission is in the proper
     format, that the programs run and produce the correct output,
     and that you updated the header lines correctly in each of
     the source files.

 10. Are you CERTAIN you complied with all of these nit-picking
     instructions?  Really?  Maybe you ought to check just one
     more time. :)

#----------------------------------------------------------------------
