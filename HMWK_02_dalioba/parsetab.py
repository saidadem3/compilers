
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftPLUSMINUSleftMULTIPLYDIVIDEMODULUSrightEXPONENTIATIONrightUMINUSUPLUSBREAK BY CONTINUE DIVIDE DO ELIF ELSE END EQUALS EXPONENTIATION FOR ID IF INT INT_LITERAL LBRACE LPAREN MINUS MODULUS MULTIPLY PLUS RBRACE RPAREN SEMICOLON THEN TO WHILEprogram : blockblock : LBRACE statement_list semicolon_opt RBRACEsemicolon_opt : epsilon\n                   | SEMICOLONstatement : BREAKstatement : CONTINUEstatement : TYPE identifier init_optstatement : expressionstatement : FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FORstatement : IF expression THEN statement_list semicolon_opt elif_list else_opt END IFstatement : WHILE expression DO statement_list semicolon_opt END WHILEstatement_list : statement_list SEMICOLON statementstatement_list : statementidentifier : IDexpression : expression PLUS     expression\n                | expression MINUS    expression\n                | expression MULTIPLY expression\n                | expression DIVIDE   expression\n                | expression MODULUS  expression\n                | expression EXPONENTIATION expression\n                | identifier EQUALS   expressionexpression : MINUS expression %prec UMINUS\n                | PLUS  expression %prec UPLUSexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : identifierinit_opt : epsilon\n              | EQUALS expressionTYPE  : INTby_opt : epsilon\n            | BY expressionelse_opt : epsilon\n              | ELSE statement_list semicolon_optelif_list  : epsilon\n                | elif_list ELIF expression THEN statement_list semicolon_optepsilon :'
    
_lr_action_items = {'LBRACE':([0,],[3,]),'$end':([1,2,37,],[0,-1,-2,]),'BREAK':([3,21,50,51,70,72,79,],[6,6,6,6,6,6,6,]),'CONTINUE':([3,21,50,51,70,72,79,],[7,7,7,7,7,7,7,]),'FOR':([3,21,50,51,70,72,79,83,],[11,11,11,11,11,11,11,85,]),'IF':([3,21,50,51,70,72,74,79,],[12,12,12,12,12,12,78,12,]),'WHILE':([3,21,50,51,63,70,72,79,],[13,13,13,13,71,13,13,13,]),'INT':([3,21,50,51,70,72,79,],[14,14,14,14,14,14,14,]),'MINUS':([3,9,10,12,13,15,16,17,18,19,21,24,25,26,27,28,29,30,32,33,34,35,36,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,60,66,68,70,72,73,75,79,],[16,-26,26,16,16,16,16,16,-25,-14,16,16,16,16,16,16,16,16,26,26,-23,-22,26,16,26,-15,-16,-17,-18,-19,-20,16,16,16,-24,26,26,16,26,16,16,16,16,26,26,16,]),'PLUS':([3,9,10,12,13,15,16,17,18,19,21,24,25,26,27,28,29,30,32,33,34,35,36,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,60,66,68,70,72,73,75,79,],[15,-26,25,15,15,15,15,15,-25,-14,15,15,15,15,15,15,15,15,25,25,-23,-22,25,15,25,-15,-16,-17,-18,-19,-20,15,15,15,-24,25,25,15,25,15,15,15,15,25,25,15,]),'LPAREN':([3,12,13,15,16,17,21,24,25,26,27,28,29,30,41,49,50,51,57,66,68,70,72,79,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'INT_LITERAL':([3,12,13,15,16,17,21,24,25,26,27,28,29,30,41,49,50,51,57,66,68,70,72,79,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ID':([3,8,11,12,13,14,15,16,17,21,24,25,26,27,28,29,30,41,49,50,51,57,66,68,70,72,79,],[19,19,19,19,19,-29,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'SEMICOLON':([4,5,6,7,9,10,18,19,23,34,35,38,39,40,42,43,44,45,46,47,48,52,53,55,56,71,76,77,78,82,85,],[21,-13,-5,-6,-26,-8,-25,-14,-36,-23,-22,-12,-7,-27,-21,-15,-16,-17,-18,-19,-20,-24,-28,21,21,-11,21,21,-10,21,-9,]),'RBRACE':([4,5,6,7,9,10,18,19,20,21,22,23,34,35,38,39,40,42,43,44,45,46,47,48,52,53,71,78,85,],[-36,-13,-5,-6,-26,-8,-25,-14,37,-4,-3,-36,-23,-22,-12,-7,-27,-21,-15,-16,-17,-18,-19,-20,-24,-28,-11,-10,-9,]),'ELIF':([5,6,7,9,10,18,19,21,22,23,34,35,38,39,40,42,43,44,45,46,47,48,52,53,55,58,61,62,71,78,82,84,85,],[-13,-5,-6,-26,-8,-25,-14,-4,-3,-36,-23,-22,-12,-7,-27,-21,-15,-16,-17,-18,-19,-20,-24,-28,-36,-36,68,-34,-11,-10,-36,-35,-9,]),'ELSE':([5,6,7,9,10,18,19,21,22,23,34,35,38,39,40,42,43,44,45,46,47,48,52,53,55,58,61,62,71,78,82,84,85,],[-13,-5,-6,-26,-8,-25,-14,-4,-3,-36,-23,-22,-12,-7,-27,-21,-15,-16,-17,-18,-19,-20,-24,-28,-36,-36,70,-34,-11,-10,-36,-35,-9,]),'END':([5,6,7,9,10,18,19,21,22,23,34,35,38,39,40,42,43,44,45,46,47,48,52,53,55,56,58,59,61,62,67,69,71,76,77,78,80,81,82,84,85,],[-13,-5,-6,-26,-8,-25,-14,-4,-3,-36,-23,-22,-12,-7,-27,-21,-15,-16,-17,-18,-19,-20,-24,-28,-36,-36,-36,63,-36,-34,74,-32,-11,-36,-36,-10,-33,83,-36,-35,-9,]),'EQUALS':([9,19,23,31,],[24,-14,41,49,]),'MULTIPLY':([9,10,18,19,32,33,34,35,36,42,43,44,45,46,47,48,52,53,54,60,73,75,],[-26,27,-25,-14,27,27,-23,-22,27,27,27,27,-17,-18,-19,-20,-24,27,27,27,27,27,]),'DIVIDE':([9,10,18,19,32,33,34,35,36,42,43,44,45,46,47,48,52,53,54,60,73,75,],[-26,28,-25,-14,28,28,-23,-22,28,28,28,28,-17,-18,-19,-20,-24,28,28,28,28,28,]),'MODULUS':([9,10,18,19,32,33,34,35,36,42,43,44,45,46,47,48,52,53,54,60,73,75,],[-26,29,-25,-14,29,29,-23,-22,29,29,29,29,-17,-18,-19,-20,-24,29,29,29,29,29,]),'EXPONENTIATION':([9,10,18,19,32,33,34,35,36,42,43,44,45,46,47,48,52,53,54,60,73,75,],[-26,30,-25,-14,30,30,-23,-22,30,30,30,30,30,30,30,30,-24,30,30,30,30,30,]),'THEN':([9,18,19,32,34,35,42,43,44,45,46,47,48,52,75,],[-26,-25,-14,50,-23,-22,-21,-15,-16,-17,-18,-19,-20,-24,79,]),'DO':([9,18,19,33,34,35,42,43,44,45,46,47,48,52,60,64,65,73,],[-26,-25,-14,51,-23,-22,-21,-15,-16,-17,-18,-19,-20,-24,-36,72,-30,-31,]),'RPAREN':([9,18,19,34,35,36,42,43,44,45,46,47,48,52,],[-26,-25,-14,-23,-22,52,-21,-15,-16,-17,-18,-19,-20,-24,]),'TO':([9,18,19,34,35,42,43,44,45,46,47,48,52,54,],[-26,-25,-14,-23,-22,-21,-15,-16,-17,-18,-19,-20,-24,57,]),'BY':([9,18,19,34,35,42,43,44,45,46,47,48,52,60,],[-26,-25,-14,-23,-22,-21,-15,-16,-17,-18,-19,-20,-24,66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,],[2,]),'statement_list':([3,50,51,70,72,79,],[4,55,56,76,77,82,]),'statement':([3,21,50,51,70,72,79,],[5,38,5,5,5,5,5,]),'TYPE':([3,21,50,51,70,72,79,],[8,8,8,8,8,8,8,]),'identifier':([3,8,11,12,13,15,16,17,21,24,25,26,27,28,29,30,41,49,50,51,57,66,68,70,72,79,],[9,23,31,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'expression':([3,12,13,15,16,17,21,24,25,26,27,28,29,30,41,49,50,51,57,66,68,70,72,79,],[10,32,33,34,35,36,10,42,43,44,45,46,47,48,53,54,10,10,60,73,75,10,10,10,]),'semicolon_opt':([4,55,56,76,77,82,],[20,58,59,80,81,84,]),'epsilon':([4,23,55,56,58,60,61,76,77,82,],[22,40,22,22,62,65,69,22,22,22,]),'init_opt':([23,],[39,]),'elif_list':([58,],[61,]),'by_opt':([60,],[64,]),'else_opt':([61,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','miniFrontEnd.py',120),
  ('block -> LBRACE statement_list semicolon_opt RBRACE','block',4,'p_block','miniFrontEnd.py',124),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',128),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',129),
  ('statement -> BREAK','statement',1,'p_statement_break','miniFrontEnd.py',136),
  ('statement -> CONTINUE','statement',1,'p_statement_continue','miniFrontEnd.py',141),
  ('statement -> TYPE identifier init_opt','statement',3,'p_declaration_expression','miniFrontEnd.py',146),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',152),
  ('statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR','statement',12,'p_statement_for','miniFrontEnd.py',158),
  ('statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END IF','statement',9,'p_statement_if','miniFrontEnd.py',164),
  ('statement -> WHILE expression DO statement_list semicolon_opt END WHILE','statement',7,'p_statement_while','miniFrontEnd.py',168),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list_A','miniFrontEnd.py',173),
  ('statement_list -> statement','statement_list',1,'p_statement_list_B','miniFrontEnd.py',178),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',185),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',193),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',194),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','miniFrontEnd.py',195),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',196),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',197),
  ('expression -> expression EXPONENTIATION expression','expression',3,'p_expression_binop','miniFrontEnd.py',198),
  ('expression -> identifier EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',199),
  ('expression -> MINUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',204),
  ('expression -> PLUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',205),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',210),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',215),
  ('expression -> identifier','expression',1,'p_expression_id','miniFrontEnd.py',220),
  ('init_opt -> epsilon','init_opt',1,'p_init_opt','miniFrontEnd.py',225),
  ('init_opt -> EQUALS expression','init_opt',2,'p_init_opt','miniFrontEnd.py',226),
  ('TYPE -> INT','TYPE',1,'p_type','miniFrontEnd.py',234),
  ('by_opt -> epsilon','by_opt',1,'p_by_opt','miniFrontEnd.py',239),
  ('by_opt -> BY expression','by_opt',2,'p_by_opt','miniFrontEnd.py',240),
  ('else_opt -> epsilon','else_opt',1,'p_else_opt','miniFrontEnd.py',245),
  ('else_opt -> ELSE statement_list semicolon_opt','else_opt',3,'p_else_opt','miniFrontEnd.py',246),
  ('elif_list -> epsilon','elif_list',1,'p_elif_list','miniFrontEnd.py',254),
  ('elif_list -> elif_list ELIF expression THEN statement_list semicolon_opt','elif_list',6,'p_elif_list','miniFrontEnd.py',255),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',267),
]
