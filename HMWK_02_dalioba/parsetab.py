
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftPLUSMINUSleftMULTIPLYDIVIDEMODULUSrightEXPONENTIATIONrightUMINUSUPLUSBREAK BY CONTINUE DIVIDE DO ELIF ELSE END EQUALS EXPONENTIATION FOR ID IF INT INT_LITERAL LBRACE LPAREN MINUS MODULUS MULTIPLY PLUS RBRACE RPAREN SEMICOLON THEN TO WHILEprogram : blockblock : LBRACE statement_list semicolon_opt RBRACEsemicolon_opt : epsilon\n                   | SEMICOLONstatement : BREAKstatement : CONTINUEstatement : TYPE identifier init_optstatement : expressionstatement : FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FORstatement : WHILE expression DO statement_list semicolon_opt END WHILEstatement_list : statement_list SEMICOLON statementstatement_list : statementidentifier : IDexpression : expression PLUS     expression\n                | expression MINUS    expression\n                | expression MULTIPLY expression\n                | expression DIVIDE   expression\n                | expression MODULUS  expression\n                | expression EXPONENTIATION expression\n                | identifier EQUALS   expressionexpression : MINUS expression %prec UMINUS\n                | PLUS  expression %prec UPLUSexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : identifierinit_opt : epsilon\n              | EQUALS expressionTYPE  : INTby_opt : epsilon\n            | BY expressionepsilon :'
    
_lr_action_items = {'LBRACE':([0,],[3,]),'$end':([1,2,35,],[0,-1,-2,]),'BREAK':([3,20,48,61,],[6,6,6,6,]),'CONTINUE':([3,20,48,61,],[7,7,7,7,]),'FOR':([3,20,48,61,65,],[11,11,11,11,66,]),'WHILE':([3,20,48,56,61,],[12,12,12,60,12,]),'INT':([3,20,48,61,],[13,13,13,13,]),'MINUS':([3,9,10,12,14,15,16,17,18,20,23,24,25,26,27,28,29,31,32,33,34,39,40,41,42,43,44,45,46,47,48,49,50,51,53,55,59,61,62,],[15,-25,25,15,15,15,15,-24,-13,15,15,15,15,15,15,15,15,25,-22,-21,25,15,25,-14,-15,-16,-17,-18,-19,15,15,-23,25,25,15,25,15,15,25,]),'PLUS':([3,9,10,12,14,15,16,17,18,20,23,24,25,26,27,28,29,31,32,33,34,39,40,41,42,43,44,45,46,47,48,49,50,51,53,55,59,61,62,],[14,-25,24,14,14,14,14,-24,-13,14,14,14,14,14,14,14,14,24,-22,-21,24,14,24,-14,-15,-16,-17,-18,-19,14,14,-23,24,24,14,24,14,14,24,]),'LPAREN':([3,12,14,15,16,20,23,24,25,26,27,28,29,39,47,48,53,59,61,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'INT_LITERAL':([3,12,14,15,16,20,23,24,25,26,27,28,29,39,47,48,53,59,61,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ID':([3,8,11,12,13,14,15,16,20,23,24,25,26,27,28,29,39,47,48,53,59,61,],[18,18,18,18,-28,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'SEMICOLON':([4,5,6,7,9,10,17,18,22,32,33,36,37,38,40,41,42,43,44,45,46,49,50,52,60,63,66,],[20,-12,-5,-6,-25,-8,-24,-13,-31,-22,-21,-11,-7,-26,-20,-14,-15,-16,-17,-18,-19,-23,-27,20,-10,20,-9,]),'RBRACE':([4,5,6,7,9,10,17,18,19,20,21,22,32,33,36,37,38,40,41,42,43,44,45,46,49,50,60,66,],[-31,-12,-5,-6,-25,-8,-24,-13,35,-4,-3,-31,-22,-21,-11,-7,-26,-20,-14,-15,-16,-17,-18,-19,-23,-27,-10,-9,]),'END':([5,6,7,9,10,17,18,20,21,22,32,33,36,37,38,40,41,42,43,44,45,46,49,50,52,54,60,63,64,66,],[-12,-5,-6,-25,-8,-24,-13,-4,-3,-31,-22,-21,-11,-7,-26,-20,-14,-15,-16,-17,-18,-19,-23,-27,-31,56,-10,-31,65,-9,]),'EQUALS':([9,18,22,30,],[23,-13,39,47,]),'MULTIPLY':([9,10,17,18,31,32,33,34,40,41,42,43,44,45,46,49,50,51,55,62,],[-25,26,-24,-13,26,-22,-21,26,26,26,26,-16,-17,-18,-19,-23,26,26,26,26,]),'DIVIDE':([9,10,17,18,31,32,33,34,40,41,42,43,44,45,46,49,50,51,55,62,],[-25,27,-24,-13,27,-22,-21,27,27,27,27,-16,-17,-18,-19,-23,27,27,27,27,]),'MODULUS':([9,10,17,18,31,32,33,34,40,41,42,43,44,45,46,49,50,51,55,62,],[-25,28,-24,-13,28,-22,-21,28,28,28,28,-16,-17,-18,-19,-23,28,28,28,28,]),'EXPONENTIATION':([9,10,17,18,31,32,33,34,40,41,42,43,44,45,46,49,50,51,55,62,],[-25,29,-24,-13,29,-22,-21,29,29,29,29,29,29,29,29,-23,29,29,29,29,]),'DO':([9,17,18,31,32,33,40,41,42,43,44,45,46,49,55,57,58,62,],[-25,-24,-13,48,-22,-21,-20,-14,-15,-16,-17,-18,-19,-23,-31,61,-29,-30,]),'RPAREN':([9,17,18,32,33,34,40,41,42,43,44,45,46,49,],[-25,-24,-13,-22,-21,49,-20,-14,-15,-16,-17,-18,-19,-23,]),'TO':([9,17,18,32,33,40,41,42,43,44,45,46,49,51,],[-25,-24,-13,-22,-21,-20,-14,-15,-16,-17,-18,-19,-23,53,]),'BY':([9,17,18,32,33,40,41,42,43,44,45,46,49,55,],[-25,-24,-13,-22,-21,-20,-14,-15,-16,-17,-18,-19,-23,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,],[2,]),'statement_list':([3,48,61,],[4,52,63,]),'statement':([3,20,48,61,],[5,36,5,5,]),'TYPE':([3,20,48,61,],[8,8,8,8,]),'identifier':([3,8,11,12,14,15,16,20,23,24,25,26,27,28,29,39,47,48,53,59,61,],[9,22,30,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'expression':([3,12,14,15,16,20,23,24,25,26,27,28,29,39,47,48,53,59,61,],[10,31,32,33,34,10,40,41,42,43,44,45,46,50,51,10,55,62,10,]),'semicolon_opt':([4,52,63,],[19,54,64,]),'epsilon':([4,22,52,55,63,],[21,38,21,58,21,]),'init_opt':([22,],[37,]),'by_opt':([55,],[57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','miniFrontEnd.py',120),
  ('block -> LBRACE statement_list semicolon_opt RBRACE','block',4,'p_block','miniFrontEnd.py',124),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',128),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',129),
  ('statement -> BREAK','statement',1,'p_statement_break','miniFrontEnd.py',136),
  ('statement -> CONTINUE','statement',1,'p_statement_continue','miniFrontEnd.py',141),
  ('statement -> TYPE identifier init_opt','statement',3,'p_declaration_expression','miniFrontEnd.py',146),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',152),
  ('statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR','statement',12,'p_statement_for','miniFrontEnd.py',158),
  ('statement -> WHILE expression DO statement_list semicolon_opt END WHILE','statement',7,'p_statement_while','miniFrontEnd.py',167),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list_A','miniFrontEnd.py',172),
  ('statement_list -> statement','statement_list',1,'p_statement_list_B','miniFrontEnd.py',177),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',184),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',192),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',193),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','miniFrontEnd.py',194),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',195),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',196),
  ('expression -> expression EXPONENTIATION expression','expression',3,'p_expression_binop','miniFrontEnd.py',197),
  ('expression -> identifier EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',198),
  ('expression -> MINUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',203),
  ('expression -> PLUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',204),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',209),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',214),
  ('expression -> identifier','expression',1,'p_expression_id','miniFrontEnd.py',219),
  ('init_opt -> epsilon','init_opt',1,'p_init_opt','miniFrontEnd.py',224),
  ('init_opt -> EQUALS expression','init_opt',2,'p_init_opt','miniFrontEnd.py',225),
  ('TYPE -> INT','TYPE',1,'p_type','miniFrontEnd.py',233),
  ('by_opt -> epsilon','by_opt',1,'p_by_opt','miniFrontEnd.py',237),
  ('by_opt -> BY expression','by_opt',2,'p_by_opt','miniFrontEnd.py',238),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',246),
]
