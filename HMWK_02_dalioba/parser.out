Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELIF
    ELSE
    IF
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> LBRACE statement_list semicolon_opt RBRACE
Rule 3     semicolon_opt -> epsilon
Rule 4     semicolon_opt -> SEMICOLON
Rule 5     statement -> BREAK
Rule 6     statement -> CONTINUE
Rule 7     statement -> TYPE identifier init_opt
Rule 8     statement -> expression
Rule 9     statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
Rule 10    statement -> WHILE expression DO statement_list semicolon_opt END WHILE
Rule 11    statement_list -> statement_list SEMICOLON statement
Rule 12    statement_list -> statement
Rule 13    identifier -> ID
Rule 14    expression -> expression PLUS expression
Rule 15    expression -> expression MINUS expression
Rule 16    expression -> expression MULTIPLY expression
Rule 17    expression -> expression DIVIDE expression
Rule 18    expression -> expression MODULUS expression
Rule 19    expression -> expression EXPONENTIATION expression
Rule 20    expression -> identifier EQUALS expression
Rule 21    expression -> MINUS expression
Rule 22    expression -> PLUS expression
Rule 23    expression -> LPAREN expression RPAREN
Rule 24    expression -> INT_LITERAL
Rule 25    expression -> identifier
Rule 26    init_opt -> epsilon
Rule 27    init_opt -> EQUALS expression
Rule 28    TYPE -> INT
Rule 29    by_opt -> epsilon
Rule 30    by_opt -> BY expression
Rule 31    epsilon -> <empty>

Terminals, with rules where they appear

BREAK                : 5
BY                   : 30
CONTINUE             : 6
DIVIDE               : 17
DO                   : 9 10
ELIF                 : 
ELSE                 : 
END                  : 9 10
EQUALS               : 9 20 27
EXPONENTIATION       : 19
FOR                  : 9 9
ID                   : 13
IF                   : 
INT                  : 28
INT_LITERAL          : 24
LBRACE               : 2
LPAREN               : 23
MINUS                : 15 21
MODULUS              : 18
MULTIPLY             : 16
PLUS                 : 14 22
RBRACE               : 2
RPAREN               : 23
SEMICOLON            : 4 11
THEN                 : 
TO                   : 9
WHILE                : 10 10
error                : 

Nonterminals, with rules where they appear

TYPE                 : 7
block                : 1
by_opt               : 9
epsilon              : 3 26 29
expression           : 8 9 9 10 14 14 15 15 16 16 17 17 18 18 19 19 20 21 22 23 27 30
identifier           : 7 9 20 25
init_opt             : 7
program              : 0
semicolon_opt        : 2 9 10
statement            : 11 12
statement_list       : 2 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . LBRACE statement_list semicolon_opt RBRACE

    LBRACE          shift and go to state 3

    program                        shift and go to state 1
    block                          shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> LBRACE . statement_list semicolon_opt RBRACE
    (11) statement_list -> . statement_list SEMICOLON statement
    (12) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (28) TYPE -> . INT
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    INT             shift and go to state 13
    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    statement_list                 shift and go to state 4
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9
    expression                     shift and go to state 10

state 4

    (2) block -> LBRACE statement_list . semicolon_opt RBRACE
    (11) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (31) epsilon -> .

    SEMICOLON       shift and go to state 20
    RBRACE          reduce using rule 31 (epsilon -> .)

    semicolon_opt                  shift and go to state 19
    epsilon                        shift and go to state 21

state 5

    (12) statement_list -> statement .

    SEMICOLON       reduce using rule 12 (statement_list -> statement .)
    RBRACE          reduce using rule 12 (statement_list -> statement .)
    END             reduce using rule 12 (statement_list -> statement .)


state 6

    (5) statement -> BREAK .

    SEMICOLON       reduce using rule 5 (statement -> BREAK .)
    RBRACE          reduce using rule 5 (statement -> BREAK .)
    END             reduce using rule 5 (statement -> BREAK .)


state 7

    (6) statement -> CONTINUE .

    SEMICOLON       reduce using rule 6 (statement -> CONTINUE .)
    RBRACE          reduce using rule 6 (statement -> CONTINUE .)
    END             reduce using rule 6 (statement -> CONTINUE .)


state 8

    (7) statement -> TYPE . identifier init_opt
    (13) identifier -> . ID

    ID              shift and go to state 18

    identifier                     shift and go to state 22

state 9

    (20) expression -> identifier . EQUALS expression
    (25) expression -> identifier .

    EQUALS          shift and go to state 23
    PLUS            reduce using rule 25 (expression -> identifier .)
    MINUS           reduce using rule 25 (expression -> identifier .)
    MULTIPLY        reduce using rule 25 (expression -> identifier .)
    DIVIDE          reduce using rule 25 (expression -> identifier .)
    MODULUS         reduce using rule 25 (expression -> identifier .)
    EXPONENTIATION  reduce using rule 25 (expression -> identifier .)
    SEMICOLON       reduce using rule 25 (expression -> identifier .)
    RBRACE          reduce using rule 25 (expression -> identifier .)
    DO              reduce using rule 25 (expression -> identifier .)
    RPAREN          reduce using rule 25 (expression -> identifier .)
    END             reduce using rule 25 (expression -> identifier .)
    TO              reduce using rule 25 (expression -> identifier .)
    BY              reduce using rule 25 (expression -> identifier .)


state 10

    (8) statement -> expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    SEMICOLON       reduce using rule 8 (statement -> expression .)
    RBRACE          reduce using rule 8 (statement -> expression .)
    END             reduce using rule 8 (statement -> expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29


state 11

    (9) statement -> FOR . identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (13) identifier -> . ID

    ID              shift and go to state 18

    identifier                     shift and go to state 30

state 12

    (10) statement -> WHILE . expression DO statement_list semicolon_opt END WHILE
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 31
    identifier                     shift and go to state 9

state 13

    (28) TYPE -> INT .

    ID              reduce using rule 28 (TYPE -> INT .)


state 14

    (22) expression -> PLUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 32
    identifier                     shift and go to state 9

state 15

    (21) expression -> MINUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 33
    identifier                     shift and go to state 9

state 16

    (23) expression -> LPAREN . expression RPAREN
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 34
    identifier                     shift and go to state 9

state 17

    (24) expression -> INT_LITERAL .

    PLUS            reduce using rule 24 (expression -> INT_LITERAL .)
    MINUS           reduce using rule 24 (expression -> INT_LITERAL .)
    MULTIPLY        reduce using rule 24 (expression -> INT_LITERAL .)
    DIVIDE          reduce using rule 24 (expression -> INT_LITERAL .)
    MODULUS         reduce using rule 24 (expression -> INT_LITERAL .)
    EXPONENTIATION  reduce using rule 24 (expression -> INT_LITERAL .)
    SEMICOLON       reduce using rule 24 (expression -> INT_LITERAL .)
    RBRACE          reduce using rule 24 (expression -> INT_LITERAL .)
    DO              reduce using rule 24 (expression -> INT_LITERAL .)
    RPAREN          reduce using rule 24 (expression -> INT_LITERAL .)
    END             reduce using rule 24 (expression -> INT_LITERAL .)
    TO              reduce using rule 24 (expression -> INT_LITERAL .)
    BY              reduce using rule 24 (expression -> INT_LITERAL .)


state 18

    (13) identifier -> ID .

    EQUALS          reduce using rule 13 (identifier -> ID .)
    PLUS            reduce using rule 13 (identifier -> ID .)
    MINUS           reduce using rule 13 (identifier -> ID .)
    MULTIPLY        reduce using rule 13 (identifier -> ID .)
    DIVIDE          reduce using rule 13 (identifier -> ID .)
    MODULUS         reduce using rule 13 (identifier -> ID .)
    EXPONENTIATION  reduce using rule 13 (identifier -> ID .)
    SEMICOLON       reduce using rule 13 (identifier -> ID .)
    RBRACE          reduce using rule 13 (identifier -> ID .)
    END             reduce using rule 13 (identifier -> ID .)
    DO              reduce using rule 13 (identifier -> ID .)
    RPAREN          reduce using rule 13 (identifier -> ID .)
    TO              reduce using rule 13 (identifier -> ID .)
    BY              reduce using rule 13 (identifier -> ID .)


state 19

    (2) block -> LBRACE statement_list semicolon_opt . RBRACE

    RBRACE          shift and go to state 35


state 20

    (11) statement_list -> statement_list SEMICOLON . statement
    (4) semicolon_opt -> SEMICOLON .
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (28) TYPE -> . INT
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    RBRACE          reduce using rule 4 (semicolon_opt -> SEMICOLON .)
    END             reduce using rule 4 (semicolon_opt -> SEMICOLON .)
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    INT             shift and go to state 13
    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    statement                      shift and go to state 36
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9
    expression                     shift and go to state 10

state 21

    (3) semicolon_opt -> epsilon .

    RBRACE          reduce using rule 3 (semicolon_opt -> epsilon .)
    END             reduce using rule 3 (semicolon_opt -> epsilon .)


state 22

    (7) statement -> TYPE identifier . init_opt
    (26) init_opt -> . epsilon
    (27) init_opt -> . EQUALS expression
    (31) epsilon -> .

    EQUALS          shift and go to state 39
    SEMICOLON       reduce using rule 31 (epsilon -> .)
    RBRACE          reduce using rule 31 (epsilon -> .)
    END             reduce using rule 31 (epsilon -> .)

    init_opt                       shift and go to state 37
    epsilon                        shift and go to state 38

state 23

    (20) expression -> identifier EQUALS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    identifier                     shift and go to state 9
    expression                     shift and go to state 40

state 24

    (14) expression -> expression PLUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 41
    identifier                     shift and go to state 9

state 25

    (15) expression -> expression MINUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 42
    identifier                     shift and go to state 9

state 26

    (16) expression -> expression MULTIPLY . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 43
    identifier                     shift and go to state 9

state 27

    (17) expression -> expression DIVIDE . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 44
    identifier                     shift and go to state 9

state 28

    (18) expression -> expression MODULUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 45
    identifier                     shift and go to state 9

state 29

    (19) expression -> expression EXPONENTIATION . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 46
    identifier                     shift and go to state 9

state 30

    (9) statement -> FOR identifier . EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR

    EQUALS          shift and go to state 47


state 31

    (10) statement -> WHILE expression . DO statement_list semicolon_opt END WHILE
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    DO              shift and go to state 48
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29


state 32

    (22) expression -> PLUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 22 (expression -> PLUS expression .)
    MINUS           reduce using rule 22 (expression -> PLUS expression .)
    MULTIPLY        reduce using rule 22 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 22 (expression -> PLUS expression .)
    MODULUS         reduce using rule 22 (expression -> PLUS expression .)
    EXPONENTIATION  reduce using rule 22 (expression -> PLUS expression .)
    SEMICOLON       reduce using rule 22 (expression -> PLUS expression .)
    RBRACE          reduce using rule 22 (expression -> PLUS expression .)
    DO              reduce using rule 22 (expression -> PLUS expression .)
    RPAREN          reduce using rule 22 (expression -> PLUS expression .)
    END             reduce using rule 22 (expression -> PLUS expression .)
    TO              reduce using rule 22 (expression -> PLUS expression .)
    BY              reduce using rule 22 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULUS         [ shift and go to state 28 ]
  ! EXPONENTIATION  [ shift and go to state 29 ]


state 33

    (21) expression -> MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 21 (expression -> MINUS expression .)
    MINUS           reduce using rule 21 (expression -> MINUS expression .)
    MULTIPLY        reduce using rule 21 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 21 (expression -> MINUS expression .)
    MODULUS         reduce using rule 21 (expression -> MINUS expression .)
    EXPONENTIATION  reduce using rule 21 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 21 (expression -> MINUS expression .)
    RBRACE          reduce using rule 21 (expression -> MINUS expression .)
    DO              reduce using rule 21 (expression -> MINUS expression .)
    RPAREN          reduce using rule 21 (expression -> MINUS expression .)
    END             reduce using rule 21 (expression -> MINUS expression .)
    TO              reduce using rule 21 (expression -> MINUS expression .)
    BY              reduce using rule 21 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULUS         [ shift and go to state 28 ]
  ! EXPONENTIATION  [ shift and go to state 29 ]


state 34

    (23) expression -> LPAREN expression . RPAREN
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    RPAREN          shift and go to state 49
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29


state 35

    (2) block -> LBRACE statement_list semicolon_opt RBRACE .

    $end            reduce using rule 2 (block -> LBRACE statement_list semicolon_opt RBRACE .)


state 36

    (11) statement_list -> statement_list SEMICOLON statement .

    SEMICOLON       reduce using rule 11 (statement_list -> statement_list SEMICOLON statement .)
    RBRACE          reduce using rule 11 (statement_list -> statement_list SEMICOLON statement .)
    END             reduce using rule 11 (statement_list -> statement_list SEMICOLON statement .)


state 37

    (7) statement -> TYPE identifier init_opt .

    SEMICOLON       reduce using rule 7 (statement -> TYPE identifier init_opt .)
    RBRACE          reduce using rule 7 (statement -> TYPE identifier init_opt .)
    END             reduce using rule 7 (statement -> TYPE identifier init_opt .)


state 38

    (26) init_opt -> epsilon .

    SEMICOLON       reduce using rule 26 (init_opt -> epsilon .)
    RBRACE          reduce using rule 26 (init_opt -> epsilon .)
    END             reduce using rule 26 (init_opt -> epsilon .)


state 39

    (27) init_opt -> EQUALS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 50
    identifier                     shift and go to state 9

state 40

    (20) expression -> identifier EQUALS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    SEMICOLON       reduce using rule 20 (expression -> identifier EQUALS expression .)
    RBRACE          reduce using rule 20 (expression -> identifier EQUALS expression .)
    DO              reduce using rule 20 (expression -> identifier EQUALS expression .)
    RPAREN          reduce using rule 20 (expression -> identifier EQUALS expression .)
    END             reduce using rule 20 (expression -> identifier EQUALS expression .)
    TO              reduce using rule 20 (expression -> identifier EQUALS expression .)
    BY              reduce using rule 20 (expression -> identifier EQUALS expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29

  ! PLUS            [ reduce using rule 20 (expression -> identifier EQUALS expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> identifier EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 20 (expression -> identifier EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> identifier EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 20 (expression -> identifier EQUALS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 20 (expression -> identifier EQUALS expression .) ]


state 41

    (14) expression -> expression PLUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 14 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 14 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 14 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 14 (expression -> expression PLUS expression .)
    DO              reduce using rule 14 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression PLUS expression .)
    END             reduce using rule 14 (expression -> expression PLUS expression .)
    TO              reduce using rule 14 (expression -> expression PLUS expression .)
    BY              reduce using rule 14 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29

  ! MULTIPLY        [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]


state 42

    (15) expression -> expression MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 15 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 15 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 15 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 15 (expression -> expression MINUS expression .)
    DO              reduce using rule 15 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression MINUS expression .)
    END             reduce using rule 15 (expression -> expression MINUS expression .)
    TO              reduce using rule 15 (expression -> expression MINUS expression .)
    BY              reduce using rule 15 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29

  ! MULTIPLY        [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]


state 43

    (16) expression -> expression MULTIPLY expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 16 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 16 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 16 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    MODULUS         reduce using rule 16 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 16 (expression -> expression MULTIPLY expression .)
    RBRACE          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    DO              reduce using rule 16 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    END             reduce using rule 16 (expression -> expression MULTIPLY expression .)
    TO              reduce using rule 16 (expression -> expression MULTIPLY expression .)
    BY              reduce using rule 16 (expression -> expression MULTIPLY expression .)
    EXPONENTIATION  shift and go to state 29

  ! EXPONENTIATION  [ reduce using rule 16 (expression -> expression MULTIPLY expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULUS         [ shift and go to state 28 ]


state 44

    (17) expression -> expression DIVIDE expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 17 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 17 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 17 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 17 (expression -> expression DIVIDE expression .)
    MODULUS         reduce using rule 17 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 17 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 17 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 17 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 17 (expression -> expression DIVIDE expression .)
    END             reduce using rule 17 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 17 (expression -> expression DIVIDE expression .)
    BY              reduce using rule 17 (expression -> expression DIVIDE expression .)
    EXPONENTIATION  shift and go to state 29

  ! EXPONENTIATION  [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULUS         [ shift and go to state 28 ]


state 45

    (18) expression -> expression MODULUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 18 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 18 (expression -> expression MODULUS expression .)
    MULTIPLY        reduce using rule 18 (expression -> expression MODULUS expression .)
    DIVIDE          reduce using rule 18 (expression -> expression MODULUS expression .)
    MODULUS         reduce using rule 18 (expression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 18 (expression -> expression MODULUS expression .)
    RBRACE          reduce using rule 18 (expression -> expression MODULUS expression .)
    DO              reduce using rule 18 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 18 (expression -> expression MODULUS expression .)
    END             reduce using rule 18 (expression -> expression MODULUS expression .)
    TO              reduce using rule 18 (expression -> expression MODULUS expression .)
    BY              reduce using rule 18 (expression -> expression MODULUS expression .)
    EXPONENTIATION  shift and go to state 29

  ! EXPONENTIATION  [ reduce using rule 18 (expression -> expression MODULUS expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULUS         [ shift and go to state 28 ]


state 46

    (19) expression -> expression EXPONENTIATION expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    MINUS           reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    MULTIPLY        reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    DIVIDE          reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    MODULUS         reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    SEMICOLON       reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    RBRACE          reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    DO              reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    RPAREN          reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    END             reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    TO              reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    BY              reduce using rule 19 (expression -> expression EXPONENTIATION expression .)
    EXPONENTIATION  shift and go to state 29

  ! EXPONENTIATION  [ reduce using rule 19 (expression -> expression EXPONENTIATION expression .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULUS         [ shift and go to state 28 ]


state 47

    (9) statement -> FOR identifier EQUALS . expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    identifier                     shift and go to state 9
    expression                     shift and go to state 51

state 48

    (10) statement -> WHILE expression DO . statement_list semicolon_opt END WHILE
    (11) statement_list -> . statement_list SEMICOLON statement
    (12) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (28) TYPE -> . INT
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    INT             shift and go to state 13
    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 10
    statement_list                 shift and go to state 52
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9

state 49

    (23) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    EXPONENTIATION  reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 23 (expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 23 (expression -> LPAREN expression RPAREN .)


state 50

    (27) init_opt -> EQUALS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    SEMICOLON       reduce using rule 27 (init_opt -> EQUALS expression .)
    RBRACE          reduce using rule 27 (init_opt -> EQUALS expression .)
    END             reduce using rule 27 (init_opt -> EQUALS expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29


state 51

    (9) statement -> FOR identifier EQUALS expression . TO expression by_opt DO statement_list semicolon_opt END FOR
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    TO              shift and go to state 53
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29


state 52

    (10) statement -> WHILE expression DO statement_list . semicolon_opt END WHILE
    (11) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (31) epsilon -> .

    SEMICOLON       shift and go to state 20
    END             reduce using rule 31 (epsilon -> .)

    semicolon_opt                  shift and go to state 54
    epsilon                        shift and go to state 21

state 53

    (9) statement -> FOR identifier EQUALS expression TO . expression by_opt DO statement_list semicolon_opt END FOR
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    identifier                     shift and go to state 9
    expression                     shift and go to state 55

state 54

    (10) statement -> WHILE expression DO statement_list semicolon_opt . END WHILE

    END             shift and go to state 56


state 55

    (9) statement -> FOR identifier EQUALS expression TO expression . by_opt DO statement_list semicolon_opt END FOR
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression
    (29) by_opt -> . epsilon
    (30) by_opt -> . BY expression
    (31) epsilon -> .

    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29
    BY              shift and go to state 59
    DO              reduce using rule 31 (epsilon -> .)

    by_opt                         shift and go to state 57
    epsilon                        shift and go to state 58

state 56

    (10) statement -> WHILE expression DO statement_list semicolon_opt END . WHILE

    WHILE           shift and go to state 60


state 57

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt . DO statement_list semicolon_opt END FOR

    DO              shift and go to state 61


state 58

    (29) by_opt -> epsilon .

    DO              reduce using rule 29 (by_opt -> epsilon .)


state 59

    (30) by_opt -> BY . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    expression                     shift and go to state 62
    identifier                     shift and go to state 9

state 60

    (10) statement -> WHILE expression DO statement_list semicolon_opt END WHILE .

    SEMICOLON       reduce using rule 10 (statement -> WHILE expression DO statement_list semicolon_opt END WHILE .)
    RBRACE          reduce using rule 10 (statement -> WHILE expression DO statement_list semicolon_opt END WHILE .)
    END             reduce using rule 10 (statement -> WHILE expression DO statement_list semicolon_opt END WHILE .)


state 61

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO . statement_list semicolon_opt END FOR
    (11) statement_list -> . statement_list SEMICOLON statement
    (12) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (28) TYPE -> . INT
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression MODULUS expression
    (19) expression -> . expression EXPONENTIATION expression
    (20) expression -> . identifier EQUALS expression
    (21) expression -> . MINUS expression
    (22) expression -> . PLUS expression
    (23) expression -> . LPAREN expression RPAREN
    (24) expression -> . INT_LITERAL
    (25) expression -> . identifier
    (13) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    INT             shift and go to state 13
    MINUS           shift and go to state 15
    PLUS            shift and go to state 14
    LPAREN          shift and go to state 16
    INT_LITERAL     shift and go to state 17
    ID              shift and go to state 18

    identifier                     shift and go to state 9
    expression                     shift and go to state 10
    statement_list                 shift and go to state 63
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8

state 62

    (30) by_opt -> BY expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . MODULUS expression
    (19) expression -> expression . EXPONENTIATION expression

    DO              reduce using rule 30 (by_opt -> BY expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULUS         shift and go to state 28
    EXPONENTIATION  shift and go to state 29


state 63

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list . semicolon_opt END FOR
    (11) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (31) epsilon -> .

    SEMICOLON       shift and go to state 20
    END             reduce using rule 31 (epsilon -> .)

    semicolon_opt                  shift and go to state 64
    epsilon                        shift and go to state 21

state 64

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt . END FOR

    END             shift and go to state 65


state 65

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END . FOR

    FOR             shift and go to state 66


state 66

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .

    SEMICOLON       reduce using rule 9 (statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .)
    RBRACE          reduce using rule 9 (statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .)
    END             reduce using rule 9 (statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .)

