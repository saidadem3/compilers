Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> LBRACE statement_list semicolon_opt RBRACE
Rule 3     semicolon_opt -> epsilon
Rule 4     semicolon_opt -> SEMICOLON
Rule 5     statement -> BREAK
Rule 6     statement -> CONTINUE
Rule 7     statement -> TYPE identifier init_opt
Rule 8     statement -> expression
Rule 9     statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
Rule 10    statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END IF
Rule 11    statement -> WHILE expression DO statement_list semicolon_opt END WHILE
Rule 12    statement_list -> statement_list SEMICOLON statement
Rule 13    statement_list -> statement
Rule 14    identifier -> ID
Rule 15    expression -> expression PLUS expression
Rule 16    expression -> expression MINUS expression
Rule 17    expression -> expression MULTIPLY expression
Rule 18    expression -> expression DIVIDE expression
Rule 19    expression -> expression MODULUS expression
Rule 20    expression -> expression EXPONENTIATION expression
Rule 21    expression -> identifier EQUALS expression
Rule 22    expression -> MINUS expression
Rule 23    expression -> PLUS expression
Rule 24    expression -> LPAREN expression RPAREN
Rule 25    expression -> INT_LITERAL
Rule 26    expression -> identifier
Rule 27    init_opt -> epsilon
Rule 28    init_opt -> EQUALS expression
Rule 29    TYPE -> INT
Rule 30    by_opt -> epsilon
Rule 31    by_opt -> BY expression
Rule 32    else_opt -> epsilon
Rule 33    else_opt -> ELSE statement_list semicolon_opt
Rule 34    elif_list -> epsilon
Rule 35    elif_list -> elif_list ELIF expression THEN statement_list semicolon_opt
Rule 36    epsilon -> <empty>

Terminals, with rules where they appear

BREAK                : 5
BY                   : 31
CONTINUE             : 6
DIVIDE               : 18
DO                   : 9 11
ELIF                 : 35
ELSE                 : 33
END                  : 9 10 11
EQUALS               : 9 21 28
EXPONENTIATION       : 20
FOR                  : 9 9
ID                   : 14
IF                   : 10 10
INT                  : 29
INT_LITERAL          : 25
LBRACE               : 2
LPAREN               : 24
MINUS                : 16 22
MODULUS              : 19
MULTIPLY             : 17
PLUS                 : 15 23
RBRACE               : 2
RPAREN               : 24
SEMICOLON            : 4 12
THEN                 : 10 35
TO                   : 9
WHILE                : 11 11
error                : 

Nonterminals, with rules where they appear

TYPE                 : 7
block                : 1
by_opt               : 9
elif_list            : 10 35
else_opt             : 10
epsilon              : 3 27 30 32 34
expression           : 8 9 9 10 11 15 15 16 16 17 17 18 18 19 19 20 20 21 22 23 24 28 31 35
identifier           : 7 9 21 26
init_opt             : 7
program              : 0
semicolon_opt        : 2 9 10 11 33 35
statement            : 12 13
statement_list       : 2 9 10 11 12 33 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . LBRACE statement_list semicolon_opt RBRACE

    LBRACE          shift and go to state 3

    program                        shift and go to state 1
    block                          shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> LBRACE . statement_list semicolon_opt RBRACE
    (12) statement_list -> . statement_list SEMICOLON statement
    (13) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . IF expression THEN statement_list semicolon_opt elif_list else_opt END IF
    (11) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (29) TYPE -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    statement_list                 shift and go to state 4
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9
    expression                     shift and go to state 10

state 4

    (2) block -> LBRACE statement_list . semicolon_opt RBRACE
    (12) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (36) epsilon -> .

    SEMICOLON       shift and go to state 21
    RBRACE          reduce using rule 36 (epsilon -> .)

    semicolon_opt                  shift and go to state 20
    epsilon                        shift and go to state 22

state 5

    (13) statement_list -> statement .

    SEMICOLON       reduce using rule 13 (statement_list -> statement .)
    RBRACE          reduce using rule 13 (statement_list -> statement .)
    ELIF            reduce using rule 13 (statement_list -> statement .)
    ELSE            reduce using rule 13 (statement_list -> statement .)
    END             reduce using rule 13 (statement_list -> statement .)


state 6

    (5) statement -> BREAK .

    SEMICOLON       reduce using rule 5 (statement -> BREAK .)
    RBRACE          reduce using rule 5 (statement -> BREAK .)
    ELIF            reduce using rule 5 (statement -> BREAK .)
    ELSE            reduce using rule 5 (statement -> BREAK .)
    END             reduce using rule 5 (statement -> BREAK .)


state 7

    (6) statement -> CONTINUE .

    SEMICOLON       reduce using rule 6 (statement -> CONTINUE .)
    RBRACE          reduce using rule 6 (statement -> CONTINUE .)
    ELIF            reduce using rule 6 (statement -> CONTINUE .)
    ELSE            reduce using rule 6 (statement -> CONTINUE .)
    END             reduce using rule 6 (statement -> CONTINUE .)


state 8

    (7) statement -> TYPE . identifier init_opt
    (14) identifier -> . ID

    ID              shift and go to state 19

    identifier                     shift and go to state 23

state 9

    (21) expression -> identifier . EQUALS expression
    (26) expression -> identifier .

    EQUALS          shift and go to state 24
    PLUS            reduce using rule 26 (expression -> identifier .)
    MINUS           reduce using rule 26 (expression -> identifier .)
    MULTIPLY        reduce using rule 26 (expression -> identifier .)
    DIVIDE          reduce using rule 26 (expression -> identifier .)
    MODULUS         reduce using rule 26 (expression -> identifier .)
    EXPONENTIATION  reduce using rule 26 (expression -> identifier .)
    SEMICOLON       reduce using rule 26 (expression -> identifier .)
    RBRACE          reduce using rule 26 (expression -> identifier .)
    THEN            reduce using rule 26 (expression -> identifier .)
    DO              reduce using rule 26 (expression -> identifier .)
    RPAREN          reduce using rule 26 (expression -> identifier .)
    ELIF            reduce using rule 26 (expression -> identifier .)
    ELSE            reduce using rule 26 (expression -> identifier .)
    END             reduce using rule 26 (expression -> identifier .)
    TO              reduce using rule 26 (expression -> identifier .)
    BY              reduce using rule 26 (expression -> identifier .)


state 10

    (8) statement -> expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    SEMICOLON       reduce using rule 8 (statement -> expression .)
    RBRACE          reduce using rule 8 (statement -> expression .)
    ELIF            reduce using rule 8 (statement -> expression .)
    ELSE            reduce using rule 8 (statement -> expression .)
    END             reduce using rule 8 (statement -> expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30


state 11

    (9) statement -> FOR . identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (14) identifier -> . ID

    ID              shift and go to state 19

    identifier                     shift and go to state 31

state 12

    (10) statement -> IF . expression THEN statement_list semicolon_opt elif_list else_opt END IF
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 32
    identifier                     shift and go to state 9

state 13

    (11) statement -> WHILE . expression DO statement_list semicolon_opt END WHILE
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 33
    identifier                     shift and go to state 9

state 14

    (29) TYPE -> INT .

    ID              reduce using rule 29 (TYPE -> INT .)


state 15

    (23) expression -> PLUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 34
    identifier                     shift and go to state 9

state 16

    (22) expression -> MINUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 35
    identifier                     shift and go to state 9

state 17

    (24) expression -> LPAREN . expression RPAREN
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 36
    identifier                     shift and go to state 9

state 18

    (25) expression -> INT_LITERAL .

    PLUS            reduce using rule 25 (expression -> INT_LITERAL .)
    MINUS           reduce using rule 25 (expression -> INT_LITERAL .)
    MULTIPLY        reduce using rule 25 (expression -> INT_LITERAL .)
    DIVIDE          reduce using rule 25 (expression -> INT_LITERAL .)
    MODULUS         reduce using rule 25 (expression -> INT_LITERAL .)
    EXPONENTIATION  reduce using rule 25 (expression -> INT_LITERAL .)
    SEMICOLON       reduce using rule 25 (expression -> INT_LITERAL .)
    RBRACE          reduce using rule 25 (expression -> INT_LITERAL .)
    THEN            reduce using rule 25 (expression -> INT_LITERAL .)
    DO              reduce using rule 25 (expression -> INT_LITERAL .)
    RPAREN          reduce using rule 25 (expression -> INT_LITERAL .)
    ELIF            reduce using rule 25 (expression -> INT_LITERAL .)
    ELSE            reduce using rule 25 (expression -> INT_LITERAL .)
    END             reduce using rule 25 (expression -> INT_LITERAL .)
    TO              reduce using rule 25 (expression -> INT_LITERAL .)
    BY              reduce using rule 25 (expression -> INT_LITERAL .)


state 19

    (14) identifier -> ID .

    EQUALS          reduce using rule 14 (identifier -> ID .)
    PLUS            reduce using rule 14 (identifier -> ID .)
    MINUS           reduce using rule 14 (identifier -> ID .)
    MULTIPLY        reduce using rule 14 (identifier -> ID .)
    DIVIDE          reduce using rule 14 (identifier -> ID .)
    MODULUS         reduce using rule 14 (identifier -> ID .)
    EXPONENTIATION  reduce using rule 14 (identifier -> ID .)
    SEMICOLON       reduce using rule 14 (identifier -> ID .)
    RBRACE          reduce using rule 14 (identifier -> ID .)
    ELIF            reduce using rule 14 (identifier -> ID .)
    ELSE            reduce using rule 14 (identifier -> ID .)
    END             reduce using rule 14 (identifier -> ID .)
    THEN            reduce using rule 14 (identifier -> ID .)
    DO              reduce using rule 14 (identifier -> ID .)
    RPAREN          reduce using rule 14 (identifier -> ID .)
    TO              reduce using rule 14 (identifier -> ID .)
    BY              reduce using rule 14 (identifier -> ID .)


state 20

    (2) block -> LBRACE statement_list semicolon_opt . RBRACE

    RBRACE          shift and go to state 37


state 21

    (12) statement_list -> statement_list SEMICOLON . statement
    (4) semicolon_opt -> SEMICOLON .
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . IF expression THEN statement_list semicolon_opt elif_list else_opt END IF
    (11) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (29) TYPE -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    RBRACE          reduce using rule 4 (semicolon_opt -> SEMICOLON .)
    ELIF            reduce using rule 4 (semicolon_opt -> SEMICOLON .)
    ELSE            reduce using rule 4 (semicolon_opt -> SEMICOLON .)
    END             reduce using rule 4 (semicolon_opt -> SEMICOLON .)
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    statement                      shift and go to state 38
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9
    expression                     shift and go to state 10

state 22

    (3) semicolon_opt -> epsilon .

    RBRACE          reduce using rule 3 (semicolon_opt -> epsilon .)
    ELIF            reduce using rule 3 (semicolon_opt -> epsilon .)
    ELSE            reduce using rule 3 (semicolon_opt -> epsilon .)
    END             reduce using rule 3 (semicolon_opt -> epsilon .)


state 23

    (7) statement -> TYPE identifier . init_opt
    (27) init_opt -> . epsilon
    (28) init_opt -> . EQUALS expression
    (36) epsilon -> .

    EQUALS          shift and go to state 41
    SEMICOLON       reduce using rule 36 (epsilon -> .)
    RBRACE          reduce using rule 36 (epsilon -> .)
    ELIF            reduce using rule 36 (epsilon -> .)
    ELSE            reduce using rule 36 (epsilon -> .)
    END             reduce using rule 36 (epsilon -> .)

    init_opt                       shift and go to state 39
    epsilon                        shift and go to state 40

state 24

    (21) expression -> identifier EQUALS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    identifier                     shift and go to state 9
    expression                     shift and go to state 42

state 25

    (15) expression -> expression PLUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 43
    identifier                     shift and go to state 9

state 26

    (16) expression -> expression MINUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 44
    identifier                     shift and go to state 9

state 27

    (17) expression -> expression MULTIPLY . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 45
    identifier                     shift and go to state 9

state 28

    (18) expression -> expression DIVIDE . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 46
    identifier                     shift and go to state 9

state 29

    (19) expression -> expression MODULUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 47
    identifier                     shift and go to state 9

state 30

    (20) expression -> expression EXPONENTIATION . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 48
    identifier                     shift and go to state 9

state 31

    (9) statement -> FOR identifier . EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR

    EQUALS          shift and go to state 49


state 32

    (10) statement -> IF expression . THEN statement_list semicolon_opt elif_list else_opt END IF
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    THEN            shift and go to state 50
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30


state 33

    (11) statement -> WHILE expression . DO statement_list semicolon_opt END WHILE
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    DO              shift and go to state 51
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30


state 34

    (23) expression -> PLUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 23 (expression -> PLUS expression .)
    MINUS           reduce using rule 23 (expression -> PLUS expression .)
    MULTIPLY        reduce using rule 23 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 23 (expression -> PLUS expression .)
    MODULUS         reduce using rule 23 (expression -> PLUS expression .)
    EXPONENTIATION  reduce using rule 23 (expression -> PLUS expression .)
    SEMICOLON       reduce using rule 23 (expression -> PLUS expression .)
    RBRACE          reduce using rule 23 (expression -> PLUS expression .)
    THEN            reduce using rule 23 (expression -> PLUS expression .)
    DO              reduce using rule 23 (expression -> PLUS expression .)
    RPAREN          reduce using rule 23 (expression -> PLUS expression .)
    ELIF            reduce using rule 23 (expression -> PLUS expression .)
    ELSE            reduce using rule 23 (expression -> PLUS expression .)
    END             reduce using rule 23 (expression -> PLUS expression .)
    TO              reduce using rule 23 (expression -> PLUS expression .)
    BY              reduce using rule 23 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULUS         [ shift and go to state 29 ]
  ! EXPONENTIATION  [ shift and go to state 30 ]


state 35

    (22) expression -> MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 22 (expression -> MINUS expression .)
    MINUS           reduce using rule 22 (expression -> MINUS expression .)
    MULTIPLY        reduce using rule 22 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 22 (expression -> MINUS expression .)
    MODULUS         reduce using rule 22 (expression -> MINUS expression .)
    EXPONENTIATION  reduce using rule 22 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 22 (expression -> MINUS expression .)
    RBRACE          reduce using rule 22 (expression -> MINUS expression .)
    THEN            reduce using rule 22 (expression -> MINUS expression .)
    DO              reduce using rule 22 (expression -> MINUS expression .)
    RPAREN          reduce using rule 22 (expression -> MINUS expression .)
    ELIF            reduce using rule 22 (expression -> MINUS expression .)
    ELSE            reduce using rule 22 (expression -> MINUS expression .)
    END             reduce using rule 22 (expression -> MINUS expression .)
    TO              reduce using rule 22 (expression -> MINUS expression .)
    BY              reduce using rule 22 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULUS         [ shift and go to state 29 ]
  ! EXPONENTIATION  [ shift and go to state 30 ]


state 36

    (24) expression -> LPAREN expression . RPAREN
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    RPAREN          shift and go to state 52
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30


state 37

    (2) block -> LBRACE statement_list semicolon_opt RBRACE .

    $end            reduce using rule 2 (block -> LBRACE statement_list semicolon_opt RBRACE .)


state 38

    (12) statement_list -> statement_list SEMICOLON statement .

    SEMICOLON       reduce using rule 12 (statement_list -> statement_list SEMICOLON statement .)
    RBRACE          reduce using rule 12 (statement_list -> statement_list SEMICOLON statement .)
    ELIF            reduce using rule 12 (statement_list -> statement_list SEMICOLON statement .)
    ELSE            reduce using rule 12 (statement_list -> statement_list SEMICOLON statement .)
    END             reduce using rule 12 (statement_list -> statement_list SEMICOLON statement .)


state 39

    (7) statement -> TYPE identifier init_opt .

    SEMICOLON       reduce using rule 7 (statement -> TYPE identifier init_opt .)
    RBRACE          reduce using rule 7 (statement -> TYPE identifier init_opt .)
    ELIF            reduce using rule 7 (statement -> TYPE identifier init_opt .)
    ELSE            reduce using rule 7 (statement -> TYPE identifier init_opt .)
    END             reduce using rule 7 (statement -> TYPE identifier init_opt .)


state 40

    (27) init_opt -> epsilon .

    SEMICOLON       reduce using rule 27 (init_opt -> epsilon .)
    RBRACE          reduce using rule 27 (init_opt -> epsilon .)
    ELIF            reduce using rule 27 (init_opt -> epsilon .)
    ELSE            reduce using rule 27 (init_opt -> epsilon .)
    END             reduce using rule 27 (init_opt -> epsilon .)


state 41

    (28) init_opt -> EQUALS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 53
    identifier                     shift and go to state 9

state 42

    (21) expression -> identifier EQUALS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    SEMICOLON       reduce using rule 21 (expression -> identifier EQUALS expression .)
    RBRACE          reduce using rule 21 (expression -> identifier EQUALS expression .)
    THEN            reduce using rule 21 (expression -> identifier EQUALS expression .)
    DO              reduce using rule 21 (expression -> identifier EQUALS expression .)
    RPAREN          reduce using rule 21 (expression -> identifier EQUALS expression .)
    ELIF            reduce using rule 21 (expression -> identifier EQUALS expression .)
    ELSE            reduce using rule 21 (expression -> identifier EQUALS expression .)
    END             reduce using rule 21 (expression -> identifier EQUALS expression .)
    TO              reduce using rule 21 (expression -> identifier EQUALS expression .)
    BY              reduce using rule 21 (expression -> identifier EQUALS expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30

  ! PLUS            [ reduce using rule 21 (expression -> identifier EQUALS expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> identifier EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 21 (expression -> identifier EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> identifier EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 21 (expression -> identifier EQUALS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 21 (expression -> identifier EQUALS expression .) ]


state 43

    (15) expression -> expression PLUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 15 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 15 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 15 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 15 (expression -> expression PLUS expression .)
    THEN            reduce using rule 15 (expression -> expression PLUS expression .)
    DO              reduce using rule 15 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression PLUS expression .)
    ELIF            reduce using rule 15 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 15 (expression -> expression PLUS expression .)
    END             reduce using rule 15 (expression -> expression PLUS expression .)
    TO              reduce using rule 15 (expression -> expression PLUS expression .)
    BY              reduce using rule 15 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30

  ! MULTIPLY        [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]


state 44

    (16) expression -> expression MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 16 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 16 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 16 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 16 (expression -> expression MINUS expression .)
    THEN            reduce using rule 16 (expression -> expression MINUS expression .)
    DO              reduce using rule 16 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 16 (expression -> expression MINUS expression .)
    ELIF            reduce using rule 16 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 16 (expression -> expression MINUS expression .)
    END             reduce using rule 16 (expression -> expression MINUS expression .)
    TO              reduce using rule 16 (expression -> expression MINUS expression .)
    BY              reduce using rule 16 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30

  ! MULTIPLY        [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]


state 45

    (17) expression -> expression MULTIPLY expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 17 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 17 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 17 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 17 (expression -> expression MULTIPLY expression .)
    MODULUS         reduce using rule 17 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 17 (expression -> expression MULTIPLY expression .)
    RBRACE          reduce using rule 17 (expression -> expression MULTIPLY expression .)
    THEN            reduce using rule 17 (expression -> expression MULTIPLY expression .)
    DO              reduce using rule 17 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 17 (expression -> expression MULTIPLY expression .)
    ELIF            reduce using rule 17 (expression -> expression MULTIPLY expression .)
    ELSE            reduce using rule 17 (expression -> expression MULTIPLY expression .)
    END             reduce using rule 17 (expression -> expression MULTIPLY expression .)
    TO              reduce using rule 17 (expression -> expression MULTIPLY expression .)
    BY              reduce using rule 17 (expression -> expression MULTIPLY expression .)
    EXPONENTIATION  shift and go to state 30

  ! EXPONENTIATION  [ reduce using rule 17 (expression -> expression MULTIPLY expression .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULUS         [ shift and go to state 29 ]


state 46

    (18) expression -> expression DIVIDE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 18 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 18 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 18 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 18 (expression -> expression DIVIDE expression .)
    MODULUS         reduce using rule 18 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 18 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 18 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 18 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 18 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 18 (expression -> expression DIVIDE expression .)
    ELIF            reduce using rule 18 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 18 (expression -> expression DIVIDE expression .)
    END             reduce using rule 18 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 18 (expression -> expression DIVIDE expression .)
    BY              reduce using rule 18 (expression -> expression DIVIDE expression .)
    EXPONENTIATION  shift and go to state 30

  ! EXPONENTIATION  [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULUS         [ shift and go to state 29 ]


state 47

    (19) expression -> expression MODULUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 19 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 19 (expression -> expression MODULUS expression .)
    MULTIPLY        reduce using rule 19 (expression -> expression MODULUS expression .)
    DIVIDE          reduce using rule 19 (expression -> expression MODULUS expression .)
    MODULUS         reduce using rule 19 (expression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 19 (expression -> expression MODULUS expression .)
    RBRACE          reduce using rule 19 (expression -> expression MODULUS expression .)
    THEN            reduce using rule 19 (expression -> expression MODULUS expression .)
    DO              reduce using rule 19 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 19 (expression -> expression MODULUS expression .)
    ELIF            reduce using rule 19 (expression -> expression MODULUS expression .)
    ELSE            reduce using rule 19 (expression -> expression MODULUS expression .)
    END             reduce using rule 19 (expression -> expression MODULUS expression .)
    TO              reduce using rule 19 (expression -> expression MODULUS expression .)
    BY              reduce using rule 19 (expression -> expression MODULUS expression .)
    EXPONENTIATION  shift and go to state 30

  ! EXPONENTIATION  [ reduce using rule 19 (expression -> expression MODULUS expression .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULUS         [ shift and go to state 29 ]


state 48

    (20) expression -> expression EXPONENTIATION expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    MINUS           reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    MULTIPLY        reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    DIVIDE          reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    MODULUS         reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    SEMICOLON       reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    RBRACE          reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    THEN            reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    DO              reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    RPAREN          reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    ELIF            reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    ELSE            reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    END             reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    TO              reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    BY              reduce using rule 20 (expression -> expression EXPONENTIATION expression .)
    EXPONENTIATION  shift and go to state 30

  ! EXPONENTIATION  [ reduce using rule 20 (expression -> expression EXPONENTIATION expression .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULUS         [ shift and go to state 29 ]


state 49

    (9) statement -> FOR identifier EQUALS . expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    identifier                     shift and go to state 9
    expression                     shift and go to state 54

state 50

    (10) statement -> IF expression THEN . statement_list semicolon_opt elif_list else_opt END IF
    (12) statement_list -> . statement_list SEMICOLON statement
    (13) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . IF expression THEN statement_list semicolon_opt elif_list else_opt END IF
    (11) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (29) TYPE -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 10
    statement_list                 shift and go to state 55
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9

state 51

    (11) statement -> WHILE expression DO . statement_list semicolon_opt END WHILE
    (12) statement_list -> . statement_list SEMICOLON statement
    (13) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . IF expression THEN statement_list semicolon_opt elif_list else_opt END IF
    (11) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (29) TYPE -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 10
    statement_list                 shift and go to state 56
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9

state 52

    (24) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    EXPONENTIATION  reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 24 (expression -> LPAREN expression RPAREN .)


state 53

    (28) init_opt -> EQUALS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    SEMICOLON       reduce using rule 28 (init_opt -> EQUALS expression .)
    RBRACE          reduce using rule 28 (init_opt -> EQUALS expression .)
    ELIF            reduce using rule 28 (init_opt -> EQUALS expression .)
    ELSE            reduce using rule 28 (init_opt -> EQUALS expression .)
    END             reduce using rule 28 (init_opt -> EQUALS expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30


state 54

    (9) statement -> FOR identifier EQUALS expression . TO expression by_opt DO statement_list semicolon_opt END FOR
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    TO              shift and go to state 57
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30


state 55

    (10) statement -> IF expression THEN statement_list . semicolon_opt elif_list else_opt END IF
    (12) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (36) epsilon -> .

    SEMICOLON       shift and go to state 21
    ELIF            reduce using rule 36 (epsilon -> .)
    ELSE            reduce using rule 36 (epsilon -> .)
    END             reduce using rule 36 (epsilon -> .)

    semicolon_opt                  shift and go to state 58
    epsilon                        shift and go to state 22

state 56

    (11) statement -> WHILE expression DO statement_list . semicolon_opt END WHILE
    (12) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (36) epsilon -> .

    SEMICOLON       shift and go to state 21
    END             reduce using rule 36 (epsilon -> .)

    semicolon_opt                  shift and go to state 59
    epsilon                        shift and go to state 22

state 57

    (9) statement -> FOR identifier EQUALS expression TO . expression by_opt DO statement_list semicolon_opt END FOR
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    identifier                     shift and go to state 9
    expression                     shift and go to state 60

state 58

    (10) statement -> IF expression THEN statement_list semicolon_opt . elif_list else_opt END IF
    (34) elif_list -> . epsilon
    (35) elif_list -> . elif_list ELIF expression THEN statement_list semicolon_opt
    (36) epsilon -> .

    ELIF            reduce using rule 36 (epsilon -> .)
    ELSE            reduce using rule 36 (epsilon -> .)
    END             reduce using rule 36 (epsilon -> .)

    elif_list                      shift and go to state 61
    epsilon                        shift and go to state 62

state 59

    (11) statement -> WHILE expression DO statement_list semicolon_opt . END WHILE

    END             shift and go to state 63


state 60

    (9) statement -> FOR identifier EQUALS expression TO expression . by_opt DO statement_list semicolon_opt END FOR
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression
    (30) by_opt -> . epsilon
    (31) by_opt -> . BY expression
    (36) epsilon -> .

    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30
    BY              shift and go to state 66
    DO              reduce using rule 36 (epsilon -> .)

    by_opt                         shift and go to state 64
    epsilon                        shift and go to state 65

state 61

    (10) statement -> IF expression THEN statement_list semicolon_opt elif_list . else_opt END IF
    (35) elif_list -> elif_list . ELIF expression THEN statement_list semicolon_opt
    (32) else_opt -> . epsilon
    (33) else_opt -> . ELSE statement_list semicolon_opt
    (36) epsilon -> .

    ELIF            shift and go to state 68
    ELSE            shift and go to state 70
    END             reduce using rule 36 (epsilon -> .)

    else_opt                       shift and go to state 67
    epsilon                        shift and go to state 69

state 62

    (34) elif_list -> epsilon .

    ELIF            reduce using rule 34 (elif_list -> epsilon .)
    ELSE            reduce using rule 34 (elif_list -> epsilon .)
    END             reduce using rule 34 (elif_list -> epsilon .)


state 63

    (11) statement -> WHILE expression DO statement_list semicolon_opt END . WHILE

    WHILE           shift and go to state 71


state 64

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt . DO statement_list semicolon_opt END FOR

    DO              shift and go to state 72


state 65

    (30) by_opt -> epsilon .

    DO              reduce using rule 30 (by_opt -> epsilon .)


state 66

    (31) by_opt -> BY . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 73
    identifier                     shift and go to state 9

state 67

    (10) statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt . END IF

    END             shift and go to state 74


state 68

    (35) elif_list -> elif_list ELIF . expression THEN statement_list semicolon_opt
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 75
    identifier                     shift and go to state 9

state 69

    (32) else_opt -> epsilon .

    END             reduce using rule 32 (else_opt -> epsilon .)


state 70

    (33) else_opt -> ELSE . statement_list semicolon_opt
    (12) statement_list -> . statement_list SEMICOLON statement
    (13) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . IF expression THEN statement_list semicolon_opt elif_list else_opt END IF
    (11) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (29) TYPE -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    statement_list                 shift and go to state 76
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9
    expression                     shift and go to state 10

state 71

    (11) statement -> WHILE expression DO statement_list semicolon_opt END WHILE .

    SEMICOLON       reduce using rule 11 (statement -> WHILE expression DO statement_list semicolon_opt END WHILE .)
    RBRACE          reduce using rule 11 (statement -> WHILE expression DO statement_list semicolon_opt END WHILE .)
    ELIF            reduce using rule 11 (statement -> WHILE expression DO statement_list semicolon_opt END WHILE .)
    ELSE            reduce using rule 11 (statement -> WHILE expression DO statement_list semicolon_opt END WHILE .)
    END             reduce using rule 11 (statement -> WHILE expression DO statement_list semicolon_opt END WHILE .)


state 72

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO . statement_list semicolon_opt END FOR
    (12) statement_list -> . statement_list SEMICOLON statement
    (13) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . IF expression THEN statement_list semicolon_opt elif_list else_opt END IF
    (11) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (29) TYPE -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    identifier                     shift and go to state 9
    expression                     shift and go to state 10
    statement_list                 shift and go to state 77
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8

state 73

    (31) by_opt -> BY expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    DO              reduce using rule 31 (by_opt -> BY expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30


state 74

    (10) statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END . IF

    IF              shift and go to state 78


state 75

    (35) elif_list -> elif_list ELIF expression . THEN statement_list semicolon_opt
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . MULTIPLY expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . MODULUS expression
    (20) expression -> expression . EXPONENTIATION expression

    THEN            shift and go to state 79
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULUS         shift and go to state 29
    EXPONENTIATION  shift and go to state 30


state 76

    (33) else_opt -> ELSE statement_list . semicolon_opt
    (12) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (36) epsilon -> .

    SEMICOLON       shift and go to state 21
    END             reduce using rule 36 (epsilon -> .)

    semicolon_opt                  shift and go to state 80
    epsilon                        shift and go to state 22

state 77

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list . semicolon_opt END FOR
    (12) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (36) epsilon -> .

    SEMICOLON       shift and go to state 21
    END             reduce using rule 36 (epsilon -> .)

    semicolon_opt                  shift and go to state 81
    epsilon                        shift and go to state 22

state 78

    (10) statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END IF .

    SEMICOLON       reduce using rule 10 (statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END IF .)
    RBRACE          reduce using rule 10 (statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END IF .)
    ELIF            reduce using rule 10 (statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END IF .)
    ELSE            reduce using rule 10 (statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END IF .)
    END             reduce using rule 10 (statement -> IF expression THEN statement_list semicolon_opt elif_list else_opt END IF .)


state 79

    (35) elif_list -> elif_list ELIF expression THEN . statement_list semicolon_opt
    (12) statement_list -> . statement_list SEMICOLON statement
    (13) statement_list -> . statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . TYPE identifier init_opt
    (8) statement -> . expression
    (9) statement -> . FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR
    (10) statement -> . IF expression THEN statement_list semicolon_opt elif_list else_opt END IF
    (11) statement -> . WHILE expression DO statement_list semicolon_opt END WHILE
    (29) TYPE -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression MULTIPLY expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression MODULUS expression
    (20) expression -> . expression EXPONENTIATION expression
    (21) expression -> . identifier EQUALS expression
    (22) expression -> . MINUS expression
    (23) expression -> . PLUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . INT_LITERAL
    (26) expression -> . identifier
    (14) identifier -> . ID

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    FOR             shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    INT             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 15
    LPAREN          shift and go to state 17
    INT_LITERAL     shift and go to state 18
    ID              shift and go to state 19

    expression                     shift and go to state 10
    statement_list                 shift and go to state 82
    statement                      shift and go to state 5
    TYPE                           shift and go to state 8
    identifier                     shift and go to state 9

state 80

    (33) else_opt -> ELSE statement_list semicolon_opt .

    END             reduce using rule 33 (else_opt -> ELSE statement_list semicolon_opt .)


state 81

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt . END FOR

    END             shift and go to state 83


state 82

    (35) elif_list -> elif_list ELIF expression THEN statement_list . semicolon_opt
    (12) statement_list -> statement_list . SEMICOLON statement
    (3) semicolon_opt -> . epsilon
    (4) semicolon_opt -> . SEMICOLON
    (36) epsilon -> .

    SEMICOLON       shift and go to state 21
    ELIF            reduce using rule 36 (epsilon -> .)
    ELSE            reduce using rule 36 (epsilon -> .)
    END             reduce using rule 36 (epsilon -> .)

    semicolon_opt                  shift and go to state 84
    epsilon                        shift and go to state 22

state 83

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END . FOR

    FOR             shift and go to state 85


state 84

    (35) elif_list -> elif_list ELIF expression THEN statement_list semicolon_opt .

    ELIF            reduce using rule 35 (elif_list -> elif_list ELIF expression THEN statement_list semicolon_opt .)
    ELSE            reduce using rule 35 (elif_list -> elif_list ELIF expression THEN statement_list semicolon_opt .)
    END             reduce using rule 35 (elif_list -> elif_list ELIF expression THEN statement_list semicolon_opt .)


state 85

    (9) statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .

    SEMICOLON       reduce using rule 9 (statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .)
    RBRACE          reduce using rule 9 (statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .)
    ELIF            reduce using rule 9 (statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .)
    ELSE            reduce using rule 9 (statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .)
    END             reduce using rule 9 (statement -> FOR identifier EQUALS expression TO expression by_opt DO statement_list semicolon_opt END FOR .)

